import{r as _,R as g}from"./index-RYns6xqu.js";import{b as B,M as N,f as v,L as I,S as $,l as Z,p as U,a as ct,d as W,c as pt,e as D,i as ut,g as dt,h as ft,j as q,k as mt,m as R,n as O,o as yt,s as ht}from"./index-zQP5iNEI.js";import{l as w}from"./lodash-CcdATr5u.js";import{r as gt}from"./index-BwmuJAIN.js";const xt="nantes-ancenis",bt="nantes-angers",wt="nantes-marseille",_t="nantes-copenhagen",Vt=[xt,bt,wt,_t],Pt="https://osm.osrd.fr/data/v3.json",Et=[{id:"water",type:"fill",source:"openmaptiles","source-layer":"water",filter:["all",["!=","brunnel","tunnel"]],paint:{"fill-color":"rgb(158,189,255)"}},{id:"road_secondary_tertiary_casing",type:"line",source:"openmaptiles","source-layer":"transportation",filter:["all",["!in","brunnel","bridge","tunnel"],["in","class","secondary","tertiary"],["!=","ramp",1]],layout:{"line-cap":"round","line-join":"round",visibility:"visible"},paint:{"line-color":"#e9ac77","line-width":{base:1.2,stops:[[8,1.5],[20,17]]}}},{id:"road_trunk_primary_casing",type:"line",source:"openmaptiles","source-layer":"transportation",filter:["all",["!in","brunnel","bridge","tunnel"],["in","class","primary","trunk"]],layout:{"line-join":"round",visibility:"visible"},paint:{"line-color":"#e9ac77","line-width":{base:1.2,stops:[[5,.4],[6,.7],[7,1.75],[20,22]]}}},{id:"road_motorway",type:"line",source:"openmaptiles","source-layer":"transportation",minzoom:5,filter:["all",["!in","brunnel","bridge","tunnel"],["==","class","motorway"],["!=","ramp",1]],layout:{"line-cap":"round","line-join":"round",visibility:"visible"},paint:{"line-color":{base:1,stops:[[5,"hsl(26, 87%, 62%)"],[6,"#fc8"]]},"line-width":{base:1.2,stops:[[5,0],[7,1],[20,18]]}}},{id:"road_major_rail",type:"line",source:"openmaptiles","source-layer":"transportation",filter:["all",["!in","brunnel","bridge","tunnel"],["==","class","rail"]],layout:{visibility:"visible"},paint:{"line-color":"#bbb","line-width":{base:1.4,stops:[[14,.4],[15,.75],[20,2]]}}},{id:"road_major_rail_hatching",type:"line",source:"openmaptiles","source-layer":"transportation",filter:["all",["!in","brunnel","bridge","tunnel"],["==","class","rail"]],layout:{visibility:"visible"},paint:{"line-color":"#bbb","line-dasharray":[.2,8],"line-width":{base:1.4,stops:[[14.5,0],[15,3],[20,8]]}}},{id:"road_transit_rail",type:"line",source:"openmaptiles","source-layer":"transportation",filter:["all",["!in","brunnel","bridge","tunnel"],["==","class","transit"]],layout:{visibility:"visible"},paint:{"line-color":"#bbb","line-width":{base:1.4,stops:[[14,.4],[15,.75],[20,2]]}}},{id:"road_transit_rail_hatching",type:"line",source:"openmaptiles","source-layer":"transportation",filter:["all",["!in","brunnel","bridge","tunnel"],["==","class","transit"]],layout:{visibility:"visible"},paint:{"line-color":"#bbb","line-dasharray":[.2,8],"line-width":{base:1.4,stops:[[14.5,0],[15,3],[20,8]]}}},{id:"water_name_line",type:"symbol",source:"openmaptiles","source-layer":"waterway",filter:["all",["==","$type","LineString"]],layout:{"text-field":"{name}","text-font":["Roboto Regular"],"text-max-width":5,"text-size":12,"symbol-placement":"line"},paint:{"text-color":"#5d60be","text-halo-color":"rgba(255,255,255,0.7)","text-halo-width":1}},{id:"water_name_point",type:"symbol",source:"openmaptiles","source-layer":"water_name",filter:["==","$type","Point"],layout:{"text-field":"{name}","text-font":["Roboto Regular"],"text-max-width":5,"text-size":12},paint:{"text-color":"#5d60be","text-halo-color":"rgba(255,255,255,0.7)","text-halo-width":1}},{id:"poi_z16",type:"symbol",source:"openmaptiles","source-layer":"poi",minzoom:16,filter:["all",["==","$type","Point"],[">=","rank",20]],layout:{"icon-image":["match",["get","subclass"],["florist","furniture"],["get","subclass"],["get","class"]],"text-anchor":"top","text-field":"{name}","text-font":["Roboto Condensed Italic"],"text-max-width":9,"text-offset":[0,.6],"text-size":12},paint:{"text-color":"#666","text-halo-blur":.5,"text-halo-color":"#ffffff","text-halo-width":1}},{id:"poi_z15",type:"symbol",source:"openmaptiles","source-layer":"poi",minzoom:15,filter:["all",["==","$type","Point"],[">=","rank",7],["<","rank",20]],layout:{"icon-image":["match",["get","subclass"],["florist","furniture"],["get","subclass"],["get","class"]],"text-anchor":"top","text-field":"{name}","text-font":["Roboto Condensed Italic"],"text-max-width":9,"text-offset":[0,.6],"text-size":12},paint:{"text-color":"#666","text-halo-blur":.5,"text-halo-color":"#ffffff","text-halo-width":1}},{id:"poi_z14",type:"symbol",source:"openmaptiles","source-layer":"poi",minzoom:14,filter:["all",["==","$type","Point"],[">=","rank",1],["<","rank",7]],layout:{"icon-image":["match",["get","subclass"],["florist","furniture"],["get","subclass"],["get","class"]],"text-anchor":"top","text-field":"{name}","text-font":["Roboto Condensed Italic"],"text-max-width":9,"text-offset":[0,.6],"text-size":12},paint:{"text-color":"#666","text-halo-blur":.5,"text-halo-color":"#ffffff","text-halo-width":1}},{id:"poi_transit",type:"symbol",source:"openmaptiles","source-layer":"poi",filter:["all",["in","class","bus","rail","airport"]],layout:{"icon-image":"{class}","text-anchor":"left","text-field":"{name_en}","text-font":["Roboto Condensed Italic"],"text-max-width":9,"text-offset":[.9,0],"text-size":12},paint:{"text-color":"#4898ff","text-halo-blur":.5,"text-halo-color":"#ffffff","text-halo-width":1}},{id:"road_label",type:"symbol",source:"openmaptiles","source-layer":"transportation_name",filter:["all"],layout:{"symbol-placement":"line","text-anchor":"center","text-field":"{name}","text-font":["Roboto Regular"],"text-offset":[0,.15],"text-size":{base:1,stops:[[13,12],[14,13]]}},paint:{"text-color":"#765","text-halo-blur":.5,"text-halo-width":1}},{id:"road_shield",type:"symbol",source:"openmaptiles","source-layer":"transportation_name",minzoom:7,filter:["all",["<=","ref_length",6]],layout:{"icon-image":"default_{ref_length}","icon-rotation-alignment":"viewport","symbol-placement":"point","symbol-spacing":500,"text-field":"{ref}","text-font":["Roboto Regular"],"text-offset":[0,.1],"text-rotation-alignment":"viewport","text-size":10,"icon-size":.8}},{id:"place_other",type:"symbol",source:"openmaptiles","source-layer":"place",filter:["all",["in","class","hamlet","island","islet","neighbourhood","suburb","quarter"]],layout:{"text-field":"{name_en}","text-font":["Roboto Condensed Italic"],"text-letter-spacing":.1,"text-max-width":9,"text-size":{base:1.2,stops:[[12,10],[15,14]]},"text-transform":"uppercase"},paint:{"text-color":"#633","text-halo-color":"rgba(255,255,255,0.8)","text-halo-width":1.2}},{id:"place_village",type:"symbol",source:"openmaptiles","source-layer":"place",filter:["all",["==","class","village"]],layout:{"text-field":"{name_en}","text-font":["Roboto Regular"],"text-max-width":8,"text-size":{base:1.2,stops:[[10,12],[15,22]]}},paint:{"text-color":"#333","text-halo-color":"rgba(255,255,255,0.8)","text-halo-width":1.2}},{id:"place_town",type:"symbol",source:"openmaptiles","source-layer":"place",filter:["all",["==","class","town"]],layout:{"icon-image":{base:1,stops:[[0,"dot_9"],[8,""]]},"text-anchor":"bottom","text-field":"{name_en}","text-font":["Roboto Regular"],"text-max-width":8,"text-offset":[0,0],"text-size":{base:1.2,stops:[[7,12],[11,16]]}},paint:{"text-color":"#333","text-halo-color":"rgba(255,255,255,0.8)","text-halo-width":1.2}},{id:"place_city",type:"symbol",source:"openmaptiles","source-layer":"place",minzoom:5,filter:["all",["==","class","city"]],layout:{"icon-image":{base:1,stops:[[0,"dot_9"],[8,""]]},"text-anchor":"bottom","text-field":"{name_en}","text-font":["Roboto Medium"],"text-max-width":8,"text-offset":[0,0],"text-size":{base:1.2,stops:[[7,14],[11,24]]},"icon-allow-overlap":!0,"icon-optional":!1},paint:{"text-color":"#333","text-halo-color":"rgba(255,255,255,0.8)","text-halo-width":1.2}},{id:"state",type:"symbol",source:"openmaptiles","source-layer":"place",maxzoom:6,filter:["all",["==","class","state"]],layout:{"text-field":"{name_en}","text-font":["Roboto Condensed Italic"],"text-size":{stops:[[4,11],[6,15]]},"text-transform":"uppercase"},paint:{"text-color":"#633","text-halo-color":"rgba(255,255,255,0.7)","text-halo-width":1}},{id:"country_3",type:"symbol",source:"openmaptiles","source-layer":"place",filter:["all",[">=","rank",3],["==","class","country"]],layout:{"text-field":"{name_en}","text-font":["Roboto Condensed Italic"],"text-max-width":6.25,"text-size":{stops:[[3,11],[7,17]]},"text-transform":"none"},paint:{"text-color":"#334","text-halo-blur":1,"text-halo-color":"rgba(255,255,255,0.8)","text-halo-width":1}},{id:"country_2",type:"symbol",source:"openmaptiles","source-layer":"place",filter:["all",["==","rank",2],["==","class","country"]],layout:{"text-field":"{name_en}","text-font":["Roboto Condensed Italic"],"text-max-width":6.25,"text-size":{stops:[[2,11],[5,17]]},"text-transform":"none"},paint:{"text-color":"#334","text-halo-blur":1,"text-halo-color":"rgba(255,255,255,0.8)","text-halo-width":1}},{id:"country_1",type:"symbol",source:"openmaptiles","source-layer":"place",filter:["all",["==","rank",1],["==","class","country"]],layout:{"text-field":"{name_en}","text-font":["Roboto Condensed Italic"],"text-max-width":6.25,"text-size":{stops:[[1,11],[4,17]]},"text-transform":"none"},paint:{"text-color":"#334","text-halo-blur":1,"text-halo-color":"rgba(255,255,255,0.8)","text-halo-width":1}},{id:"continent",type:"symbol",source:"openmaptiles","source-layer":"place",maxzoom:1,filter:["all",["==","class","continent"]],layout:{"text-field":"{name_en}","text-font":["Roboto Condensed Italic"],"text-size":13,"text-transform":"uppercase","text-justify":"center"},paint:{"text-color":"#633","text-halo-color":"rgba(255,255,255,0.7)","text-halo-width":1}}],Kt={id:"osm",url:Pt,layers:Et},te={version:8,name:"Blank",sources:{openmaptiles:{type:"vector",url:"https://osm.osrd.fr/data/v3.json"}},sprite:"https://maputnik.github.io/osm-liberty/sprites/osm-liberty",glyphs:"https://static.osm.osrd.fr/fonts/{fontstack}/{range}.pbf",layers:[{id:"emptyBackground",type:"background",layout:{visibility:"visible"}}]},ee=({path:t,mapStyle:n,sources:e,children:r})=>{const[a,o]=_.useState(null),i=_.useMemo(()=>e.flatMap(({layers:s})=>s.map(({id:u})=>u)),[e]);return _.useEffect(()=>{!a||!t||setTimeout(()=>{a.fitBounds(B(t),{animate:!1}),a.resize()},0)},[a]),g.createElement(N,{ref:o,mapStyle:n,style:{width:"100%",height:"100%"},interactiveLayerIds:i,onClick:({features:s})=>{s!=null&&s.length&&console.log("Click base map",s!=null&&s.length?s.length===1?s[0]:v(s):null)}},g.createElement(I,{type:"background",paint:{"background-color":"white"}}),e.map(({id:s,url:u,layers:c})=>g.createElement($,{key:s,id:s,type:"vector",url:u},c.map(({id:p,...d})=>g.createElement(I,{key:p,id:p,...d})))),r)},Mt=()=>g.createElement("div",{style:{display:"flex",alignItems:"center",justifyContent:"center",height:"100%"}},g.createElement("span",null,"Loading..."));function S(t){return t[0]}function k(t){return t[1]}function J(t,n){return[S(n)-S(t),k(n)-k(t)]}function Lt(t,n){return[S(t)+S(n),k(t)+k(n)]}function V(t,n){return[S(t)*n,k(t)*n]}function K(t,n){return V(t,1/n)}function T(t){return Math.sqrt(S(t)**2+k(t)**2)}function St(t,n){return T(J(t,n))}function kt(t){return K(t,T(t))}function tt(t,n){return S(t)*S(n)+k(t)+k(n)}function Rt(t,n){return Math.acos(tt(t,n)/T(t)/T(n))}const L={x:S,y:k,vector:J,add:Lt,multiply:V,divide:K,length:T,distance:St,normalize:kt,dot:tt,angle:Rt};function vt(t,n){if(n<=1)throw new Error("samples must be an integer greater than 1");const e=[],a=Z(t,{units:"meters"})/(n-1);for(let o=0;o<n;o++)o?o===n-1?e.push(U(w.last(t.geometry.coordinates))):e.push(ct(t,a*o,{units:"meters"})):e.push(U(w.first(t.geometry.coordinates)));return{step:a,points:e}}function It(t,n){if(n<=1)throw new Error("lengthToAdd must be a positive");const e=t.geometry.coordinates,r=e[0],a=e[1],o=e[e.length-1],i=e[e.length-2];return{...t,geometry:{...t.geometry,coordinates:[L.add(r,L.multiply(L.vector(a,r),n/W(a,r,{units:"meters"}))),...e,L.add(o,L.multiply(L.vector(i,o),n/W(i,o,{units:"meters"})))]}}}function Bt([t,n],{geometry:{coordinates:[[[e,r],[a,o],[i,s]]]}}){const u=(o-s)*(e-i)+(i-a)*(r-s),c=((o-s)*(t-i)+(i-a)*(n-s))/u,p=((s-r)*(t-i)+(e-i)*(n-s))/u,d=1-c-p;return[c,p,d]}function Ct([t,n,e]){return t>=0&&t<=1&&n>=0&&n<=1&&e>=0&&e<=1}function zt([t,n,e],{geometry:{coordinates:[[[r,a],[o,i],[s,u]]]}}){return[t*r+n*o+e*s,t*a+n*i+e*u]}function Tt(t,n){return{type:"Feature",id:t.id,properties:{...t.properties,sourceLayer:t.sourceLayer||t.properties.sourceLayer||n},geometry:t.geometry||t._geometry}}function j(t,n=!1){switch(t.type){case"rectangle":{const[[e,r],[a,o]]=t.points;return{type:"Feature",properties:{},geometry:{type:"Polygon",coordinates:[[[e,r],[a,r],[a,o],[e,o],[e,r]]]}}}case"polygon":return{type:"Feature",properties:{},geometry:n?{type:"Polygon",coordinates:[[...t.points,t.points[0]]]}:{type:"LineString",coordinates:t.points}};default:throw new Error("Zone is neither a polygone, neither a rectangle")}}function Ft(t){if(t.type==="rectangle"){const[[n,e],[r,a]]=t.points;return[Math.min(n,r),Math.min(e,a),Math.max(n,r),Math.max(e,a)]}return B(j(t,!0))}function $t(t,n){const e=n.geometry.type==="MultiLineString"?n.geometry.coordinates:[n.geometry.coordinates],r={type:"Feature",properties:n.properties,geometry:{type:"MultiLineString",coordinates:[]}};return e.forEach(a=>{if(a.length<2)return;const o={type:"Point",coordinates:a[0]},i={type:"Point",coordinates:a[a.length-1]};let s=dt({type:"LineString",coordinates:a},t).features.map(c=>c.geometry);D(o,t)&&(s=[o].concat(s)),D(i,t)&&s.push(i),w.chunk(s,2).filter(c=>c.length===2).forEach(([c,p])=>{r.geometry.coordinates.push(ft(c.coordinates,p.coordinates,{type:"LineString",coordinates:a}).geometry.coordinates)})}),r.geometry.coordinates.length>1?r:r.geometry.coordinates.length===1?q(r.geometry.coordinates[0],r.properties):null}function et(t,n){if(t.type==="FeatureCollection")return{...t,features:t.features.flatMap(e=>{const r=et(e,n);return r?[r]:[]})};if(t.type==="Feature"){const e=t,r=e.geometry.type;if(r==="LineString"||r==="MultiLineString"){if(n.type==="polygon"){const i=$t(j(n,!0),e);return i?{...e,...i}:null}const o=pt(e,Ft(n));return o.geometry.coordinates.length?o:null}const a=j(n,!0).geometry;if(r==="Point")return D(e.geometry.coordinates,a)?t:null;if(r==="MultiPoint"){const o={...e,geometry:{...e.geometry,coordinates:e.geometry.coordinates.filter(i=>D(i,a))}};return o.geometry.coordinates.length?o:null}if(r==="Polygon"||r==="MultiPolygon"){const o=ut(e,a);return o&&o.geometry.coordinates.length?{...e,...o,properties:e.properties}:null}}return t}const Y="Loading data around warped path",Dt=({bbox:t,mapStyle:n,onDataLoaded:e,sources:r,timeout:a,log:o})=>{const[i,s]=_.useState(null),[u,c]=_.useState("idle");return _.useEffect(()=>{i&&(i.fitBounds(t,{animate:!1}),setTimeout(()=>{o&&console.time(Y),c("render")},0))},[i,t]),_.useEffect(()=>{if(u==="render"){const p=i,d=()=>{let f=0,h=1;const y=new Set,x={};r.forEach(({id:b,layers:P})=>{const M=[];P.forEach(({"source-layer":E})=>{const C=p.querySourceFeatures(b,{sourceLayer:E}).map(z=>Tt(z,E));for(let z=0,lt=C.length;z<lt;z++){const A=C[z],F=A.id||"generated/"+h++;if(y.has(F)){const H=F+"/dedup/"+h++;y.add(H),M.push({...A,id:H})}else y.add(F),M.push({...A,id:F})}}),x[b]=v(M),f+=M.length||0}),o&&console.timeEnd(Y),o&&console.log("  - Features: ",f),l(),e(x),c("loaded")};let m=null;a&&(m=window.setTimeout(d,a));const l=()=>{p.off("idle",d),m!==null&&window.clearTimeout(m)};return p.on("idle",d),l}},[u]),u!=="loaded"?gt.createPortal(g.createElement("div",{style:{position:"fixed",bottom:"110%",height:1200,width:1200}},g.createElement(N,{ref:s,mapStyle:n,style:{width:"100%",height:"100%"}},u==="render"&&r.map(({id:p,url:d,layers:m})=>g.createElement($,{key:p,id:p,type:"vector",url:d},m.map(({id:l,...f})=>g.createElement(I,{key:l,id:l,...f})))))),document.body):null},Ot=({bbox:t,mapStyle:n,sources:e,transformedData:r,backgroundColor:a="white",path:o,pathLayer:i,log:s,children:u})=>{const[c,p]=_.useState(null),d=_.useMemo(()=>v(o?[o]:[]),[o]),m=_.useMemo(()=>e.flatMap(({layers:l})=>l.map(({id:f})=>f)),[e]);return _.useEffect(()=>{if(!c)return;const l=(t[0]+t[2])/2,f=[l,t[1],l,t[3]];setTimeout(()=>{c.fitBounds(f,{animate:!1}),c.resize()},0)},[c,t]),g.createElement(N,{ref:p,mapStyle:n,style:{width:"100%",height:"100%"},interactiveLayerIds:s?m:[],onClick:({features:l})=>{s&&console.log("Click transformed data map",l!=null&&l.length?l.length===1?l[0]:v(l):null)}},g.createElement(I,{type:"background",paint:{"background-color":a}}),e.map(l=>g.createElement($,{key:l.id,id:l.id,type:"geojson",data:r[l.id]||v([])},l.layers.map(f=>{const y=["==","sourceLayer",f["source-layer"]];return g.createElement(I,{key:f.id,...w.omit(f,"source-layer"),filter:f.filter?["all",f.filter,y]:y})}))),o&&i&&g.createElement($,{type:"geojson",data:d},g.createElement(I,{...w.omit(i,"source-layer")})),u)};function ot(t){return w.keyBy(t.features,n=>n.properties.triangleId)}function nt(t,n){const e=[],r=ot(t),a=t.features.length/n/2/2;for(let o=0;o<n;o++){e[o]=e[o]||{},e[o+1]=e[o+1]||{};for(let i=-1;i<=1;i+=2)for(let s=0;s<a;s++){const u=r[`step:${o}/strip:${i*(s+1)}/inside`],c=r[`step:${o}/strip:${i*(s+1)}/outside`],[[p,d,m]]=u.geometry.coordinates,[[l]]=c.geometry.coordinates;e[o][i*s]=p,e[o][i*(s+1)]=m,e[o+1][i*s]=d,e[o+1][i*(s+1)]=l}}return e}function rt(t){const n=v([]),e=t.length-1,r=(Object.keys(t[0]).length-1)/2;for(let a=0;a<e;a++)for(let o=-1;o<=1;o+=2)for(let i=0;i<r;i++){const s=t[a][o*i],u=t[a][o*(i+1)],c=t[a+1][o*i],p=t[a+1][o*(i+1)];n.features.push(O([[s,c,u,s]],{triangleId:`step:${a}/strip:${o*(i+1)}/inside`})),n.features.push(O([[p,c,u,p]],{triangleId:`step:${a}/strip:${o*(i+1)}/outside`}))}return n}function At(t){const n=t[0],e=t[t.length-1],r=(Object.keys(n).length-1)/2,a=[];for(let o=-r;o<=r;o++)a.push(t[0][o]);for(let o=1,i=t.length-1;o<i;o++)a.push(t[o][r]),a.unshift(t[o][-r]);for(let o=r;o>=-r;o--)a.push(e[o]);return a.push(a[0]),{type:"polygon",points:a}}function jt(t,n){const e=(n==null?void 0:n.stripsPerSize)||3,r=t.geometry.coordinates.length;if(r<=2)throw new Error("line must have at least 3 points");const a=Z(t),o=a/(r-1),i=mt(t),s=v([]),u=R(i,a/2,180),c=[];for(let l=0;l<r;l++)c.push(R(u,-l*o,180).geometry.coordinates);const p=q(c);for(let l=0;l<r-1;l++){const f=p.geometry.coordinates[l],h=p.geometry.coordinates[l+1];for(let y=-1;y<=1;y+=2)for(let x=0;x<e;x++){const b=R(f,o*x,y*90).geometry.coordinates,P=R(f,o*(x+1),y*90).geometry.coordinates,M=R(h,o*x,y*90).geometry.coordinates,E=R(h,o*(x+1),y*90).geometry.coordinates;s.features.push(O([[b,M,P,b]],{triangleId:`step:${l}/strip:${y*(x+1)}/inside`})),s.features.push(O([[E,M,P,E]],{triangleId:`step:${l}/strip:${y*(x+1)}/outside`}))}}const d=[];for(let l=0;l<r;l++){d[l]={};const f=t.geometry.coordinates[l],h=t.geometry.coordinates[l===0?l:l-1],y=t.geometry.coordinates[l===r-1?l:l+1],x=yt(h,y)+90;d[l][0]=f;for(let b=-1;b<=1;b+=2)for(let P=1;P<=e;P++)d[l][b*P]=R(f,o*P*b,x).geometry.coordinates}return{original:rt(d),warped:s}}function at(t,n,e){const r=w.clamp((e==null?void 0:e.force)||.5,0,1),a=Math.max(1,(e==null?void 0:e.iterations)||1);if(a>1){let c=t;for(let p=0;p<a;p++)c=at(c,n,{force:r});return c}const o=nt(t,n),i=o.length,s=[],u=(Object.keys(o[0]).length-1)/2;s[0]=w.cloneDeep(o[0]),s[i-1]=w.cloneDeep(o[i-1]);for(let c=1;c<i-1;c++){s[c]={};for(let p=-1;p<=1;p+=2){s[c][0]=o[c][0];for(let d=1;d<=u;d++){const m=o[c][p*d],l=(o[c-1]||{})[p*d],f=(o[c+1]||{})[p*d],h=(o[c]||{})[p*d-1],y=(o[c]||{})[p*d+1],x=[l,f,h||L.add(m,L.vector(y,m)),y||L.add(m,L.vector(h,m))];s[c][p*d]=[w.meanBy(x,b=>b[0])*r+m[0]*(1-r),w.meanBy(x,b=>b[1])*r+m[1]*(1-r)]}}}return rt(s)}function Gt([t,n,e,r],[a,o,i,s]){return!(t>i)&&!(e<a)&&!(n>s)&&!(r<o)}function Q(t,n){return n?{type:"leaf",elements:[]}:{type:"quad",bbox:t,children:[null,null,null,null]}}function Nt(t,n){const e=B(t),r=Q(e);for(let a=0,o=t.features.length;a<o;a++){const i=t.features[a],s=B(i);let u=[r];for(let c=0;c<n&&u.length;c++){const p=[];for(let d=0,m=u.length;d<m;d++){const l=u[d];if(l.type!=="quad")break;const[f,h,y,x]=l.bbox,b=(f+y)/2,P=(h+x)/2,M=[[f,h,b,P],[b,h,y,P],[f,P,b,x],[b,P,y,x]];for(let E=0;E<M.length;E++){const C=M[E];Gt(s,C)&&(l.children[E]=l.children[E]||Q(C,c===n-1),p.push(l.children[E]))}}u=p}for(let c=0,p=u.length;c<p;c++){const d=u[c];if(d.type!=="leaf")break;d.elements.push(i)}}return r}function it(t,n){const[e,r]=t,[a,o,i,s]=n.bbox,u=(a+i)/2,c=(o+s)/2;let p;return e<u&&r<c?p=n.children[0]:e>u&&r<c?p=n.children[1]:e<u&&r>c?p=n.children[2]:p=n.children[3],p?p.type==="quad"?it(t,p):p.elements:[]}function qt(t,n,e){let r;t.type==="quad"?r=w.keyBy(it(e,t),o=>o.properties.triangleId):r=t;const a=Object.keys(r);for(let o=0,i=a.length;o<i;o++){const s=a[o],u=r[s],c=Bt(e,u);if(Ct(c))return zt(c,n[s])}return null}function G(t,n){if(!t)return null;switch(t.type){case"Point":{const e=n(t.coordinates);return e?{...t,coordinates:e}:null}case"MultiPoint":case"LineString":{const e=t.coordinates.flatMap(r=>{const a=n(r);return a?[a]:[]});return e.length?{...t,coordinates:e}:null}case"Polygon":case"MultiLineString":{const e=t.coordinates.flatMap(r=>{const a=r.flatMap(o=>{const i=n(o);return i?[i]:[]});return a.length?[a]:[]});return e.length?{...t,coordinates:e}:null}case"MultiPolygon":{const e=t.coordinates.flatMap(r=>{const a=r.flatMap(o=>{const i=o.flatMap(s=>{const u=n(s);return u?[u]:[]});return i.length?[i]:[]});return a.length?[a]:[]});return e.length?{...t,coordinates:e}:null}case"GeometryCollection":return{...t,geometries:t.geometries.map(e=>G(e,n))};default:return t}}function st(t,n,e){if(t.type==="FeatureCollection")return{...t,features:t.features.flatMap(r=>{const a=st(r,n,e);return a?[a]:[]})};if(t.type==="Feature"){const r=et(t,e);if(r){const a=G(r.geometry,n);return a?{...r,geometry:a}:null}return null}return G(t,n)}const Ht={tolerance:.01,samplesCount:15,straightenForce:.8,straightenIterations:5,quadtreeDepth:4,stripsPerSide:3};function Ut(t,n={}){const e={...Ht,...n},r=ht(t,{tolerance:e.tolerance}),a=vt(r,e.samplesCount),o=q(a.points.map(h=>h.geometry.coordinates)),i=It(o,a.step),s=i.geometry.coordinates.length-1,{warped:u,original:c}=jt(i,{stripsPerSize:e.stripsPerSide}),p=at(c,s,{force:e.straightenForce,iterations:e.straightenIterations}),d=ot(u),m=Nt(p,e.quadtreeDepth),l=At(nt(p,s)),f=h=>qt(m,d,h);return{warpedPathBBox:B(u),transform:h=>st(h,f,l),grid:p,warpedGrid:u}}const X="Warping data",Wt={loader:Mt},oe=({path:t,pathLayer:n,sources:e,components:r={},mapStyle:a,warpingOptions:o,log:i,children:s})=>{const[u,c]=_.useState({type:"idle"}),p={...Wt,...r};return _.useEffect(()=>{const d=B(t),{warpedPathBBox:m,transform:l}=Ut(t,o),f=l(t);c({type:"pathLoaded",path:t,warpedPath:f,pathBBox:d,warpedPathBBox:m,transform:l})},[t,o]),g.createElement(g.Fragment,null,u.type==="pathLoaded"&&g.createElement(Dt,{log:i,mapStyle:a,bbox:u.pathBBox,sources:e,timeout:3e3,onDataLoaded:d=>{i&&console.time(X);const m=w.omitBy(w.mapValues(d,l=>l?u.transform(l):null),w.isNil);i&&console.timeEnd(X),c({...u,data:d,transformedData:m,type:"dataLoaded"})}}),u.type!=="dataLoaded"&&g.createElement(p.loader,null),u.type==="dataLoaded"&&g.createElement(Ot,{log:i,mapStyle:a,bbox:u.warpedPathBBox,sources:e,transformedData:u.transformedData,path:u.warpedPath,pathLayer:n},s))};function Yt(t){if(t.type==="ready")return t.data;if(t.type==="loading")return t.previousData}function ne(t,n){const[e,r]=_.useState({type:"loading"});return _.useEffect(()=>{let a=!1;return r({type:"loading",previousData:Yt(e)}),t().then(o=>{a||r({type:"ready",data:o})}).catch(o=>{a||r({type:"error",error:o})}),()=>{a=!0}},n),e}export{ee as B,Ht as D,Mt as L,te as O,Vt as P,oe as W,Kt as a,wt as b,xt as c,bt as d,_t as e,Ut as g,ne as u};
